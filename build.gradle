plugins {
    id 'org.springframework.boot' version '2.3.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.0"
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

group = "$group"
version = "$version"
sourceCompatibility = JavaVersion.VERSION_11

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.retry:spring-retry'

    implementation 'org.springframework.cloud:spring-cloud-config-client'

    implementation('org.postgresql:postgresql')
    implementation group: 'org.mapstruct', name: 'mapstruct', version: "${project.property("mapstruct.version")}"

    implementation 'org.springdoc:springdoc-openapi-ui:1.5.0'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: "${project.('lombok.version')}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile group: 'com.h2database', name: 'h2', version: "${project.('h2.version')}"

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${project.('lombok.version')}"
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: "${project.property("mapstruct.version")}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.('spring-cloud.version')}"
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    mainClassName = 'com.epam.yoke.event.YokeEventApplication'
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Amapstruct.suppressGeneratorTimestamp=true']
}

task classpathJar(type: Jar) {
    inputs.files sourceSets.main.runtimeClasspath

    archiveFileName = "runboot-classpath.jar"
    doFirst {
        // If run in configuration phase, some artifacts may not exist yet (after clean)
        // and File.toURI canâ€™t figure out what is directory to add the critical trailing slash.
        manifest {
            def classpath = sourceSets.main.runtimeClasspath.files
            attributes "Class-Path": classpath.collect { f -> f.toURI().toString() }.join(" ")
        }
    }
}

